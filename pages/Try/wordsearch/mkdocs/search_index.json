{
    "docs": [
        {
            "location": "/", 
            "text": "Word Search Starter Kit\n\n\n\n\nThis starter kit will allow you to rapidly write 'word search' style games and edit puzzles for your game.\n\n\n\n\n\n\n\n\nAlso Included\n\n\nThis starter kit is made using a standard base that can be found in all current and future 'try before you buy' kits.  Those parts are:\n\n\n\n\n\n\nbuttonMaker\n - Button builders for push, toggle, and radio buttons.  \n\n\n\n\nDocs coming soon...\n\n\n\n\n\n\n\n\nsoundMgr\n - Basic sound manager that you can easily tweak and extend.\n\n\n\n\nDocs coming soon...\n\n\n\n\n\n\n\n\nutils\n - Utilities module that includes tons of featues, including a \nbutton generator\n.\n\n\n\n\nDocs coming soon...\n\n\n\n\n\n\n\n\nThe Viewer\n\n\nExample Usage\n\n\nrequire \neasy.globals\n\nlocal utils = require \neasy.utils\n\nrequire \npresets.presets\n -- For button maker\nlocal buttonMaker = require \neasy.buttonMaker\n\n\nlocal wordSearch = require \neasy.wordSearch\n\n\nlocal group\nlocal puzzleNum = 0\nlocal function run()  \n\n  puzzleNum = puzzleNum + 1\n  puzzleNum = (puzzleNum \n 2) and 1 or puzzleNum\n\n  display.remove(group)\n  group = display.newGroup()\n\n  --\n  -- Draw a background\n  --    \n  local back = display.newRect( group, centerX, centerY, fullw, fullh ) \n\n  --\n  -- Draw a win label\n  --\n  local winLabel = display.newText( group, \nPuzzle Complete\n, \n                                    centerX, bottom - 40, \nLato-Black.ttf\n, 60 )\n  winLabel:setFillColor(1,1,1)\n  winLabel.isVisible = false\n\n  --\n  -- Add a button to 're-run' this example\n  --\n  local button = buttonMaker.easyPush( { parent = group, x = right - 55, y = top + 20,  \n                                         fontSize = 20, width = 100, height = 30, \n                                         labelText = \nNext\n, listener = run } ) \n  button.isVisible = false\n\n  --\n  -- Add a button to 're-run' this example\n  --\n  local button = buttonMaker.easyPush( { parent = group, x = right - 55, y = top + 20,  \n                                        fontSize = 20, width = 100, height = 30, \n                                        labelText = \nNext\n, listener = run } ) \n  button.isVisible = false\n\n  -- \n  local puzzleToLoad    = string.format( \npuzzle_%0.3d.json\n, puzzleNum )\n  local tileSize    = 50\n  local info        = wordSearch.getPuzzle( puzzleToLoad )\n  --utils.dump(info,\ninfo\n)\n  --\n  local puzzleWidth   = info.cols * tileSize\n  local puzzleHeight  = info.rows * tileSize\n  --\n  local puzzleX = centerX - puzzleWidth/2 - 180\n  local puzzleY = centerY - puzzleHeight/2 - 10\n\n  --\n  --  Draw word list\n  --\n  local wordList = info.rawList\n  wordList = utils.split(wordList,\n\\n\n)\n  --utils.dump(wordList, \nwordList\n)\n  local wordLabels = {}\n  --\n  local x = puzzleX + puzzleWidth + 21\n  local y = puzzleY\n  local tray = display.newRect( group, x, y, 350, puzzleHeight )\n  tray:setStrokeColor(unpack(utils.hexcolor(\n#128223\n)))\n  tray.strokeWidth = 5\n  tray.anchorX = 0\n  tray.anchorY = 0\n  --\n  local tmp = display.newText( group, \nDifficulty: \n .. \n                               tostring(utils.round(info.difficulty,2)), \n                               centerX, top + 30, \nLato-Black.ttf\n, 25 ) \n  tmp:setFillColor(unpack(utils.hexcolor(\n#128223\n)))\n  --\n  x = x + 350/2\n  y = y + 40\n  --\n  for i = 1, #wordList do\n    local word = wordList[i]\n    local tmp = display.newText( group, word, x, y, \nRoboto-Thin.ttf\n, 20 )\n    tmp:setFillColor(0,0,0)\n    wordLabels[word] = tmp\n    tmp.line = display.newLine( x - 10 - tmp.contentWidth/2, y, x + tmp.contentWidth/2 + 10, y )\n    tmp.line.strokeWidth = 2\n    tmp.line:setStrokeColor(0,0,0)\n    tmp.line.isVisible = false\n    y = y + 40\n  end\n  --\n  -- Listener for puzzle\n  --\n  local function onPuzzleEvent( event )\n    if( event.phase == \nfoundWord\n ) then\n      print(event.word)\n      print(wordLabels[event.word])\n      wordLabels[event.word].line.isVisible = true\n\n    elseif( event.phase == \npuzzleComplete\n ) then\n      winLabel.isVisible = true\n      button.isVisible = true\n    end\n  end\n\n  --\n  -- Draw current puzzle\n  --\n  wordSearch.setTileSize( tileSize )  \n\n  local colorCodes = { \n#7ec696\n, \n#e9c9bc\n, \n#aaf2e7\n, \n#df93ed\n, \n#dbc1a6\n, \n                \n#7f89ad\n, \n#9194ff\n, \n#7fafc5\n, \n#93d3b8\n, \n#aa84cd\n, \n                \n#e1e5c2\n, \n#e1e5c2\n, \n#f9f7c4\n, \n#92ba9f\n, \n#ec99e1\n, \n                \n#af89d6\n, \n#a3a1c9\n, \n#afdece\n, }\n  wordSearch.setColors( colorCodes )  \n\n  local params =\n  { \n    tileImg         = \nimages/fillT.png\n,\n    letterColor     = { 0, 0, 0 },\n    --letterSize      = 25,\n    letterFont      = \nLato-Black.ttf\n,\n    listener      = onPuzzleEvent \n  } \n\n  wordSearch.setLineWidth( 36 )\n\n  wordSearch.createPuzzleViewer( group, puzzleX, puzzleY, puzzleToLoad, params )\nend\n\nrun()\n\n\n\n\nThe Editor\n\n\nBasic Usage\n\n\nlocal mode = \nedit\n -- edit view\n\nif( mode == \nedit\n ) then\n    local utils = require \neasy.utils\n\n    require \npresets.presets\n -- For button maker\n    local wordSearch = require \neasy.wordSearch\n\n    wordSearch.setFont( \neditor.ttf\n )\n    wordSearch.setTileSize(34)\n    wordSearch.createEditor()\n\nelse\n    require \neasy.globals\n\n    local utils = require \neasy.utils\n\n    require \npresets.presets\n -- For button maker\n    local wordSearch = require \neasy.wordSearch\n\n\n    -- \n    local tileSize      = 60\n    local info              = wordSearch.getPuzzle( \npuzzle_001.json\n )\n    local puzzleWidth   = info.cols * tileSize\n    local puzzleHeight  = info.rows * tileSize\n    --\n    local x = centerX - puzzleWidth/2\n    local y = centerY - puzzleHeight/2\n    --  \n    wordSearch.setTileSize( tileSize )\n\n    local params =\n    { \n        tileImg                 = \nimages/fillW.png\n,\n        letterColor         = { 0, 0, 0 },\n        letterSize          = 25,\n        letterFont          = \nRoboto-Thin.ttf\n }\n\n    wordSearch.createPuzzleViewer( nil, x, y, \npuzzle_001.json\n, params )\nend\n\n\n\n\nQuick Reference\n\n\ncreateEditor\n\n\nwordSearch.createEditor( group )\n - Creates and starts the editor.\n\n\n\n\ngroup - An optional display group to place all content in.\n\n\n\n\n\n\ncreatePuzzleViewer\n\n\nwordSearch.createPuzzleViewer( group, x, y, puzzleToLoad, params  )\n - Creates a puzzle 'viewer'.\n\n\nThe 'viewer' is essentially a fully functional game instance that you can place anywherey you like,  in any group you like.\n\n\n\n\ngroup - An optional display group to place all content in.\n\n\nx, y - \n x, y \n position of center of puzzle.\n\n\npuzzleToLoad - Full name of puzzle, including the .json extension.  \n\n\nparams - A table of optional parameters.\n\n\nlistener - Function to call when board is solved.\n\n\nlandWidth, landHeight - Width and height of 'lands'.\n\n\nlandStroke - Stroke width of land.\n\n\nlandImage - Image to use for drawing lands. If none supplied, a rectangle is drawn.\n\n\nlandColor - Fill color to use for land.  Default is white.\n\n\ntileWidth, tileHeight - Width and height of 'tiles'.\n\n\ntileStroke - Stroke width of tile.\n\n\ntileImage - Image to use for drawing tiles. If none supplied, a rectangle is drawn.\n\n\ntileImages - If supplied, you are telling the module to look in this folder for the letter tiles.\n\n\ntileExtension - Optionally used with 'tileImages' parameter and must be either \".png\" or \".jpg\". \n\n\ntileColor - Fill color to use for tile.  Default is white.\n\n\nletterFont - Font to use for letters if you're not supplying letter tiles.\n\n\nletterSize - Size of letters (only for non-letter tile case).\n\n\nletterColor - Color of letters (only for non-letter tile case).\n\n\n\n\n\n\n\n\n\n\nNote: All puzzle definitions are assumed to be in the folder \n~/puzzles/\n.\n\n\n\n\n\n\ndestroyEditor\n\n\nwordSearch.createEditor()\n - Destroys current editor.\n\n\n\n\ndestroyPuzzleViewer\n\n\nwordSearch.createPuzzleViewer()\n - Destroys current 'viewer'.\n\n\n\n\ngetPuzzle\n\n\nwordSearch.getPuzzle( puzzleToLoad )\n - Returns a table containing the puzzle definition for a named puzzle.\n\n\n\n\npuzzleToLoad - Full name of puzzle, including the .json extension.  \n\n\n\n\nReturned Table Fields\n\n\n\n\nrows - Number of rows in puzzle.\n\n\ncols - Number of colums in puzzle.\n\n\ninCols - Words in columns.\n\n\ninRows - Words in rows.\n\n\ninDiagonals - Words in diagonals.\n\n\ndifficult - Rated dificulty of puzzle from 1 .. 10.\n\n\nrawPuzzle - Raw puzzle (rows of letters separated by \"\\n\").\n\n\nrawList - Raw list of words in puzzle, separated by \"\\n\".\n\n\n\n\n\n\nNote: All puzzle definitions are assumed to be in the folder \n~/puzzles/\n.\n\n\n\n\n\n\nsetColors\n\n\nwordSearch.setColors( colorCodes )\n - Set your own custom color codes for lines.\n\n\n\n\ncolorCodes - A table of strings, where each string is a hex encoded color. \n\n\nEx: This is red \n#FF0000\n\n\n\n\n\n\n\n\n\n\nsetFont\n\n\nwordSearch.setFont( ef )\n - Changes the font used to draw letters.\n\n\n\n\nef - Name of font to use for letters.  Set to \nnil\n to reset to default.\n\n\n\n\n\n\nsetLineWidth\n\n\nwordSearch.setLineWidth( width )\n - If running viewer, this will set the width of the lines.\n\n\n\n\nwidth - Width of lines and end-caps.\n\n\n\n\n\n\nsetTileSize\n\n\nwordSearch.setTileSize( size )\n - Set size of tiles.\n\n\n\n\nsize - Width and height of tiles.\n\n\n\n\nPosting Questions To The Forums\n\n\nI will be providing help (exclusively) through the \nCorona SDK Forums\n.  (\nSorry: Direct e-mails and private messages will not be answered.\n)\n\n\nWhen posting a question in the forums, be sure to follow these guidelines:\n\n\n\n\nPost to this forum: \nhttps://forums.coronalabs.com/forum/553-other-third-party-tools/\n\n\nMake sure the \ntitle\n starts with: \nWord Search Starter Kit\n and includes a short and meaninful name for the the problem.\n\n\nIn the \nbody\n of the post give me clear, concise, and precise description or question.\n\n\n\n\n\n\n~ \nThe Roaming Gamer\n\n\n\n\n\n\n  Copyright \n Roaming Gamer, LLC. 2008-2017; All Rights Reserved", 
            "title": "About"
        }, 
        {
            "location": "/#word-search-starter-kit", 
            "text": "This starter kit will allow you to rapidly write 'word search' style games and edit puzzles for your game.", 
            "title": "Word Search Starter Kit"
        }, 
        {
            "location": "/#also-included", 
            "text": "This starter kit is made using a standard base that can be found in all current and future 'try before you buy' kits.  Those parts are:    buttonMaker  - Button builders for push, toggle, and radio buttons.     Docs coming soon...     soundMgr  - Basic sound manager that you can easily tweak and extend.   Docs coming soon...     utils  - Utilities module that includes tons of featues, including a  button generator .   Docs coming soon...", 
            "title": "Also Included"
        }, 
        {
            "location": "/#the-viewer", 
            "text": "", 
            "title": "The Viewer"
        }, 
        {
            "location": "/#example-usage", 
            "text": "require  easy.globals \nlocal utils = require  easy.utils \nrequire  presets.presets  -- For button maker\nlocal buttonMaker = require  easy.buttonMaker \n\nlocal wordSearch = require  easy.wordSearch \n\nlocal group\nlocal puzzleNum = 0\nlocal function run()  \n\n  puzzleNum = puzzleNum + 1\n  puzzleNum = (puzzleNum   2) and 1 or puzzleNum\n\n  display.remove(group)\n  group = display.newGroup()\n\n  --\n  -- Draw a background\n  --    \n  local back = display.newRect( group, centerX, centerY, fullw, fullh ) \n\n  --\n  -- Draw a win label\n  --\n  local winLabel = display.newText( group,  Puzzle Complete , \n                                    centerX, bottom - 40,  Lato-Black.ttf , 60 )\n  winLabel:setFillColor(1,1,1)\n  winLabel.isVisible = false\n\n  --\n  -- Add a button to 're-run' this example\n  --\n  local button = buttonMaker.easyPush( { parent = group, x = right - 55, y = top + 20,  \n                                         fontSize = 20, width = 100, height = 30, \n                                         labelText =  Next , listener = run } ) \n  button.isVisible = false\n\n  --\n  -- Add a button to 're-run' this example\n  --\n  local button = buttonMaker.easyPush( { parent = group, x = right - 55, y = top + 20,  \n                                        fontSize = 20, width = 100, height = 30, \n                                        labelText =  Next , listener = run } ) \n  button.isVisible = false\n\n  -- \n  local puzzleToLoad    = string.format(  puzzle_%0.3d.json , puzzleNum )\n  local tileSize    = 50\n  local info        = wordSearch.getPuzzle( puzzleToLoad )\n  --utils.dump(info, info )\n  --\n  local puzzleWidth   = info.cols * tileSize\n  local puzzleHeight  = info.rows * tileSize\n  --\n  local puzzleX = centerX - puzzleWidth/2 - 180\n  local puzzleY = centerY - puzzleHeight/2 - 10\n\n  --\n  --  Draw word list\n  --\n  local wordList = info.rawList\n  wordList = utils.split(wordList, \\n )\n  --utils.dump(wordList,  wordList )\n  local wordLabels = {}\n  --\n  local x = puzzleX + puzzleWidth + 21\n  local y = puzzleY\n  local tray = display.newRect( group, x, y, 350, puzzleHeight )\n  tray:setStrokeColor(unpack(utils.hexcolor( #128223 )))\n  tray.strokeWidth = 5\n  tray.anchorX = 0\n  tray.anchorY = 0\n  --\n  local tmp = display.newText( group,  Difficulty:   .. \n                               tostring(utils.round(info.difficulty,2)), \n                               centerX, top + 30,  Lato-Black.ttf , 25 ) \n  tmp:setFillColor(unpack(utils.hexcolor( #128223 )))\n  --\n  x = x + 350/2\n  y = y + 40\n  --\n  for i = 1, #wordList do\n    local word = wordList[i]\n    local tmp = display.newText( group, word, x, y,  Roboto-Thin.ttf , 20 )\n    tmp:setFillColor(0,0,0)\n    wordLabels[word] = tmp\n    tmp.line = display.newLine( x - 10 - tmp.contentWidth/2, y, x + tmp.contentWidth/2 + 10, y )\n    tmp.line.strokeWidth = 2\n    tmp.line:setStrokeColor(0,0,0)\n    tmp.line.isVisible = false\n    y = y + 40\n  end\n  --\n  -- Listener for puzzle\n  --\n  local function onPuzzleEvent( event )\n    if( event.phase ==  foundWord  ) then\n      print(event.word)\n      print(wordLabels[event.word])\n      wordLabels[event.word].line.isVisible = true\n\n    elseif( event.phase ==  puzzleComplete  ) then\n      winLabel.isVisible = true\n      button.isVisible = true\n    end\n  end\n\n  --\n  -- Draw current puzzle\n  --\n  wordSearch.setTileSize( tileSize )  \n\n  local colorCodes = {  #7ec696 ,  #e9c9bc ,  #aaf2e7 ,  #df93ed ,  #dbc1a6 , \n                 #7f89ad ,  #9194ff ,  #7fafc5 ,  #93d3b8 ,  #aa84cd , \n                 #e1e5c2 ,  #e1e5c2 ,  #f9f7c4 ,  #92ba9f ,  #ec99e1 , \n                 #af89d6 ,  #a3a1c9 ,  #afdece , }\n  wordSearch.setColors( colorCodes )  \n\n  local params =\n  { \n    tileImg         =  images/fillT.png ,\n    letterColor     = { 0, 0, 0 },\n    --letterSize      = 25,\n    letterFont      =  Lato-Black.ttf ,\n    listener      = onPuzzleEvent \n  } \n\n  wordSearch.setLineWidth( 36 )\n\n  wordSearch.createPuzzleViewer( group, puzzleX, puzzleY, puzzleToLoad, params )\nend\n\nrun()", 
            "title": "Example Usage"
        }, 
        {
            "location": "/#the-editor", 
            "text": "", 
            "title": "The Editor"
        }, 
        {
            "location": "/#basic-usage", 
            "text": "local mode =  edit  -- edit view\n\nif( mode ==  edit  ) then\n    local utils = require  easy.utils \n    require  presets.presets  -- For button maker\n    local wordSearch = require  easy.wordSearch \n    wordSearch.setFont(  editor.ttf  )\n    wordSearch.setTileSize(34)\n    wordSearch.createEditor()\n\nelse\n    require  easy.globals \n    local utils = require  easy.utils \n    require  presets.presets  -- For button maker\n    local wordSearch = require  easy.wordSearch \n\n    -- \n    local tileSize      = 60\n    local info              = wordSearch.getPuzzle(  puzzle_001.json  )\n    local puzzleWidth   = info.cols * tileSize\n    local puzzleHeight  = info.rows * tileSize\n    --\n    local x = centerX - puzzleWidth/2\n    local y = centerY - puzzleHeight/2\n    --  \n    wordSearch.setTileSize( tileSize )\n\n    local params =\n    { \n        tileImg                 =  images/fillW.png ,\n        letterColor         = { 0, 0, 0 },\n        letterSize          = 25,\n        letterFont          =  Roboto-Thin.ttf  }\n\n    wordSearch.createPuzzleViewer( nil, x, y,  puzzle_001.json , params )\nend", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/#quick-reference", 
            "text": "", 
            "title": "Quick Reference"
        }, 
        {
            "location": "/#createeditor", 
            "text": "wordSearch.createEditor( group )  - Creates and starts the editor.   group - An optional display group to place all content in.", 
            "title": "createEditor"
        }, 
        {
            "location": "/#createpuzzleviewer", 
            "text": "wordSearch.createPuzzleViewer( group, x, y, puzzleToLoad, params  )  - Creates a puzzle 'viewer'.  The 'viewer' is essentially a fully functional game instance that you can place anywherey you like,  in any group you like.   group - An optional display group to place all content in.  x, y -   x, y   position of center of puzzle.  puzzleToLoad - Full name of puzzle, including the .json extension.    params - A table of optional parameters.  listener - Function to call when board is solved.  landWidth, landHeight - Width and height of 'lands'.  landStroke - Stroke width of land.  landImage - Image to use for drawing lands. If none supplied, a rectangle is drawn.  landColor - Fill color to use for land.  Default is white.  tileWidth, tileHeight - Width and height of 'tiles'.  tileStroke - Stroke width of tile.  tileImage - Image to use for drawing tiles. If none supplied, a rectangle is drawn.  tileImages - If supplied, you are telling the module to look in this folder for the letter tiles.  tileExtension - Optionally used with 'tileImages' parameter and must be either \".png\" or \".jpg\".   tileColor - Fill color to use for tile.  Default is white.  letterFont - Font to use for letters if you're not supplying letter tiles.  letterSize - Size of letters (only for non-letter tile case).  letterColor - Color of letters (only for non-letter tile case).      Note: All puzzle definitions are assumed to be in the folder  ~/puzzles/ .", 
            "title": "createPuzzleViewer"
        }, 
        {
            "location": "/#destroyeditor", 
            "text": "wordSearch.createEditor()  - Destroys current editor.", 
            "title": "destroyEditor"
        }, 
        {
            "location": "/#destroypuzzleviewer", 
            "text": "wordSearch.createPuzzleViewer()  - Destroys current 'viewer'.", 
            "title": "destroyPuzzleViewer"
        }, 
        {
            "location": "/#getpuzzle", 
            "text": "wordSearch.getPuzzle( puzzleToLoad )  - Returns a table containing the puzzle definition for a named puzzle.   puzzleToLoad - Full name of puzzle, including the .json extension.     Returned Table Fields   rows - Number of rows in puzzle.  cols - Number of colums in puzzle.  inCols - Words in columns.  inRows - Words in rows.  inDiagonals - Words in diagonals.  difficult - Rated dificulty of puzzle from 1 .. 10.  rawPuzzle - Raw puzzle (rows of letters separated by \"\\n\").  rawList - Raw list of words in puzzle, separated by \"\\n\".    Note: All puzzle definitions are assumed to be in the folder  ~/puzzles/ .", 
            "title": "getPuzzle"
        }, 
        {
            "location": "/#setcolors", 
            "text": "wordSearch.setColors( colorCodes )  - Set your own custom color codes for lines.   colorCodes - A table of strings, where each string is a hex encoded color.   Ex: This is red  #FF0000", 
            "title": "setColors"
        }, 
        {
            "location": "/#setfont", 
            "text": "wordSearch.setFont( ef )  - Changes the font used to draw letters.   ef - Name of font to use for letters.  Set to  nil  to reset to default.", 
            "title": "setFont"
        }, 
        {
            "location": "/#setlinewidth", 
            "text": "wordSearch.setLineWidth( width )  - If running viewer, this will set the width of the lines.   width - Width of lines and end-caps.", 
            "title": "setLineWidth"
        }, 
        {
            "location": "/#settilesize", 
            "text": "wordSearch.setTileSize( size )  - Set size of tiles.   size - Width and height of tiles.", 
            "title": "setTileSize"
        }, 
        {
            "location": "/#posting-questions-to-the-forums", 
            "text": "I will be providing help (exclusively) through the  Corona SDK Forums .  ( Sorry: Direct e-mails and private messages will not be answered. )  When posting a question in the forums, be sure to follow these guidelines:   Post to this forum:  https://forums.coronalabs.com/forum/553-other-third-party-tools/  Make sure the  title  starts with:  Word Search Starter Kit  and includes a short and meaninful name for the the problem.  In the  body  of the post give me clear, concise, and precise description or question.    ~  The Roaming Gamer      Copyright   Roaming Gamer, LLC. 2008-2017; All Rights Reserved", 
            "title": "Posting Questions To The Forums"
        }, 
        {
            "location": "/ssk2/", 
            "text": "Redirecting to homepage now...", 
            "title": "SSK2"
        }, 
        {
            "location": "/rgdocs/", 
            "text": "Redirecting to homepage now...", 
            "title": "RG Docs"
        }
    ]
}