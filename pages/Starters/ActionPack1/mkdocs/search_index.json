{
    "docs": [
        {
            "location": "/", 
            "text": "Starter: Action Pack #1\n\n\n\n\nThis starter requires \n - \nGet It Here!\n\n\n\n\nThis starter pack is \ndesigned to get you started\n writing games similar to:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlappy Bird\n\n\nEscape\n\n\nBouncing Ball 2\n\n\nFlappy Color\n\n\nCircle\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncode 569 lines\n\n\ncode 594 lines\n\n\ncode 601 lines\n\n\ncode 591 lines\n\n\ncode 616\n\n\n\n\n\n\ncomments 600 lines\n\n\ncomments 596 lines\n\n\ncomments 599 lines\n\n\ncomments 598 lines\n\n\ncomments 579 lines\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat Do These Games Have In Common?\n\n\nThese action games all share most of these features:\n\n\n\n\nThe World\n\n\nScrolls from right-to-left.\n\n\nIs (usually) endless.\n\n\nIs (probably) generated randomly.\n\n\nNote:\n Escape has both random generation and fixed content. The starter that comes with this kit shows generation.\n\n\n\n\n\n\n\n\n\n\nPlayer\n\n\nStays horizontally centered on the screen.\n\n\nDies if it hits the floor or ceiling.\n\n\nMay die if it hits an obstacle like pipes in \"Flappy Bird\".\n\n\n\n\n\n\nGoal(s)\n\n\nPass through gates, and/or\n\n\nAvoid obstacles,  and/or\n\n\nBounce off platforms, and/or\n\n\nPick up coins/gems, \nAND\n\n\nStay alive.\n\n\n\n\n\n\nInputs\n - One Touch ( \nTap\n or \nTouch and Release\n)\n\n\n\n\nWhat Is A Starter?\n\n\nStarters Are\n\n\n\"Focused examinations of game and app mechanics,\" with these primary goals,\n\n\n\n\nProvide a way (for you) to examine and understand how specific mechanics are implemented.\n\n\nGive you a working piece of code to extend and expand to suit your own needs.\n\n\nKeep game and app development simple and fun.\n\n\n\n\nStarters Are Not\n\n\n\n\nTemplates \n\n\nComplete Games\n\n\n\n\n\n\nStarters demonstrate the tricky bits that are specific to a game or mechanic.  How you polish your final game is up to you.\n\n\n~ The Roaming Gamer\n\n\n\n\nContents Of This Pack\n\n\n\n\ntemplate\\\n - The base starter from which all examples are derived.\n\n\nexamples\\\n - \nFive example game starters\n in two formats: Standalone \n Framed.\n\n\nStandalone*\n - Basic mechanics of game w/o a composer.\n framework.\n\n\nFramed*\n - Standalone + composer.\n framework.\n\n\n\n\n\n\nframe\\\n - Starter (composer.*) game framework, including these interfaces: Splash, Home, and PlayGUI.\n\n\ncredits.txt\n - List of credits and sources for free assets used in examples/template.\n\n\nlicense.txt\n - Licensing rules for this pack.\n\n\nreadMe.txt\n  - Info about the pack.\n\n\n\n\nDocumentation?\n\n\nPlease see \nTemplate Overview\n for an examination of the \ntemplate\n project.  \n\n\nThe five sample game starterss are not \nexternally\n documented, but have significant comments in the code:\n\n\n\n\nFlappy Bird - 569 lines of code; 600 lines of comments.\n\n\nEscape - 594 lines of code; 596 lines of comments.\n\n\nBouncing Ball 2 - 601 lines of code; 599 lines of comments.\n\n\nFlappy Color - 591 lines of code; 598 lines of comments.\n\n\nCircle - 616 lines of code; 579 lines of comments.\n\n\n\n\nExample\n\n\nHere is an excerpt from the Player factory (\n~/scripts/factories/player.lua\n) in the 'Flappy Bird' starter:\n\n\n\n-- ==\n--    new() - Create new instance(s) of this factory's object(s).\n-- ==\nfunction factory.new( group, x, y, params )\n    params = params or { }\n\n    -- Create player\n    local player = newImageRect( group, x, y, \nimages/rg256.png\n,\n        {   w = 40, h = 40, alpha = 1 }, \n        {   isFixedRotation = true, \n            calculator = myCC, colliderName = \nplayer\n} )\n\n    --\n    -- Track player's initial x-position\n    --\n    player.x0 = player.x    \n\n    --\n    -- Add 'enterFrame' listener to player to:\n    --\n    -- 1. Dampen vertical velocity, using actions library.\n    -- 2. Maintain forward velocity.\n    -- 3. Count distance progress.\n    --\n    player.enterFrame = function( self )\n\n\n    ... and so on\n\n\n\n\n\n  Copyright \n Roaming Gamer, LLC. 2008-2016; All Rights Reserved", 
            "title": "About"
        }, 
        {
            "location": "/#starter-action-pack-1", 
            "text": "This starter requires   -  Get It Here!   This starter pack is  designed to get you started  writing games similar to:              Flappy Bird  Escape  Bouncing Ball 2  Flappy Color  Circle                  code 569 lines  code 594 lines  code 601 lines  code 591 lines  code 616    comments 600 lines  comments 596 lines  comments 599 lines  comments 598 lines  comments 579 lines", 
            "title": "Starter: Action Pack #1"
        }, 
        {
            "location": "/#what-do-these-games-have-in-common", 
            "text": "These action games all share most of these features:   The World  Scrolls from right-to-left.  Is (usually) endless.  Is (probably) generated randomly.  Note:  Escape has both random generation and fixed content. The starter that comes with this kit shows generation.      Player  Stays horizontally centered on the screen.  Dies if it hits the floor or ceiling.  May die if it hits an obstacle like pipes in \"Flappy Bird\".    Goal(s)  Pass through gates, and/or  Avoid obstacles,  and/or  Bounce off platforms, and/or  Pick up coins/gems,  AND  Stay alive.    Inputs  - One Touch (  Tap  or  Touch and Release )", 
            "title": "What Do These Games Have In Common?"
        }, 
        {
            "location": "/#what-is-a-starter", 
            "text": "", 
            "title": "What Is A Starter?"
        }, 
        {
            "location": "/#starters-are", 
            "text": "\"Focused examinations of game and app mechanics,\" with these primary goals,   Provide a way (for you) to examine and understand how specific mechanics are implemented.  Give you a working piece of code to extend and expand to suit your own needs.  Keep game and app development simple and fun.", 
            "title": "Starters Are"
        }, 
        {
            "location": "/#starters-are-not", 
            "text": "Templates   Complete Games    Starters demonstrate the tricky bits that are specific to a game or mechanic.  How you polish your final game is up to you.  ~ The Roaming Gamer", 
            "title": "Starters Are Not"
        }, 
        {
            "location": "/#contents-of-this-pack", 
            "text": "template\\  - The base starter from which all examples are derived.  examples\\  -  Five example game starters  in two formats: Standalone   Framed.  Standalone*  - Basic mechanics of game w/o a composer.  framework.  Framed*  - Standalone + composer.  framework.    frame\\  - Starter (composer.*) game framework, including these interfaces: Splash, Home, and PlayGUI.  credits.txt  - List of credits and sources for free assets used in examples/template.  license.txt  - Licensing rules for this pack.  readMe.txt   - Info about the pack.", 
            "title": "Contents Of This Pack"
        }, 
        {
            "location": "/#documentation", 
            "text": "Please see  Template Overview  for an examination of the  template  project.    The five sample game starterss are not  externally  documented, but have significant comments in the code:   Flappy Bird - 569 lines of code; 600 lines of comments.  Escape - 594 lines of code; 596 lines of comments.  Bouncing Ball 2 - 601 lines of code; 599 lines of comments.  Flappy Color - 591 lines of code; 598 lines of comments.  Circle - 616 lines of code; 579 lines of comments.", 
            "title": "Documentation?"
        }, 
        {
            "location": "/#example", 
            "text": "Here is an excerpt from the Player factory ( ~/scripts/factories/player.lua ) in the 'Flappy Bird' starter:  \n-- ==\n--    new() - Create new instance(s) of this factory's object(s).\n-- ==\nfunction factory.new( group, x, y, params )\n    params = params or { }\n\n    -- Create player\n    local player = newImageRect( group, x, y,  images/rg256.png ,\n        {   w = 40, h = 40, alpha = 1 }, \n        {   isFixedRotation = true, \n            calculator = myCC, colliderName =  player } )\n\n    --\n    -- Track player's initial x-position\n    --\n    player.x0 = player.x    \n\n    --\n    -- Add 'enterFrame' listener to player to:\n    --\n    -- 1. Dampen vertical velocity, using actions library.\n    -- 2. Maintain forward velocity.\n    -- 3. Count distance progress.\n    --\n    player.enterFrame = function( self )\n\n\n    ... and so on    Copyright   Roaming Gamer, LLC. 2008-2016; All Rights Reserved", 
            "title": "Example"
        }, 
        {
            "location": "/quick_start/", 
            "text": "Running The Template/Examples\n\n\nBefore you can run the template or the examples, you must copy (install) \n into the appropriate folder(s).\n\n\n\n\nTo Run Template\n\n\nCopy \nssk2\n into  \n~/template/\n\n\nTo Run Standalone Game Starters\n\n\nCopy \nssk2\n into:\n\n\n\n\n~/examples/standalone/001_flappy_bird/\n\n\n~/examples/standalone/002_escape/\n\n\n~/examples/standalone/003_bouncing_ball/\n\n\n~/examples/standalone/004_flappy_color/\n\n\n~/examples/standalone/005_circle/\n\n\n\n\nTo Run Framed Game Starters\n\n\nCopy \nssk2\n into:\n\n\n\n\n~/examples/framed/001_flappy_bird/\n\n\n~/examples/framed/002_escape/\n\n\n~/examples/framed/003_bouncing_ball/\n\n\n~/examples/framed/004_flappy_color/\n\n\n~/examples/framed/005_circle/\n\n\n\n\nChecking The SSK2 Installation\n\n\nYou can check that you copied the right content by opening the folder \nssk2\n that you just copied into the project you want to run.  If you copied correctly, you will see a number of files and folders, including \nloadSSK.lua\n.\n\n\nSSK2 Correctly Installed\n\n\n\n\n\n\n  Copyright \n Roaming Gamer, LLC. 2008-2016; All Rights Reserved", 
            "title": "Quick Start"
        }, 
        {
            "location": "/quick_start/#running-the-templateexamples", 
            "text": "Before you can run the template or the examples, you must copy (install)   into the appropriate folder(s).", 
            "title": "Running The Template/Examples"
        }, 
        {
            "location": "/quick_start/#to-run-template", 
            "text": "Copy  ssk2  into   ~/template/", 
            "title": "To Run Template"
        }, 
        {
            "location": "/quick_start/#to-run-standalone-game-starters", 
            "text": "Copy  ssk2  into:   ~/examples/standalone/001_flappy_bird/  ~/examples/standalone/002_escape/  ~/examples/standalone/003_bouncing_ball/  ~/examples/standalone/004_flappy_color/  ~/examples/standalone/005_circle/", 
            "title": "To Run Standalone Game Starters"
        }, 
        {
            "location": "/quick_start/#to-run-framed-game-starters", 
            "text": "Copy  ssk2  into:   ~/examples/framed/001_flappy_bird/  ~/examples/framed/002_escape/  ~/examples/framed/003_bouncing_ball/  ~/examples/framed/004_flappy_color/  ~/examples/framed/005_circle/", 
            "title": "To Run Framed Game Starters"
        }, 
        {
            "location": "/quick_start/#checking-the-ssk2-installation", 
            "text": "You can check that you copied the right content by opening the folder  ssk2  that you just copied into the project you want to run.  If you copied correctly, you will see a number of files and folders, including  loadSSK.lua .  SSK2 Correctly Installed      Copyright   Roaming Gamer, LLC. 2008-2016; All Rights Reserved", 
            "title": "Checking The SSK2 Installation"
        }, 
        {
            "location": "/overview/", 
            "text": "Overview\n\n\nThis is an overview of the template project located in the folder: \n~/template/\n\n\nOnce you understand how the template works you should be ready to examine any of the five game starters.\n\n\nProject Structure\n\n\nThese are the files and folders in this project and what they do:\n\n\n\n\n~\\template\\\n - Home folder for 'template' project\n\n\nbuild.settings\n - A generic build settings file for this project.\n\n\nconfig.lua\n - A generic config file for the project using 640x960 letterbox scaling.\n\n\nmain.lua\n - The game's launch file.  This is where the game starts.\n\n\nimages\\\n - This folder contains images files (.jpg and .png).\n\n\nPrime.ttf\n - A font file used in all examples.\n\n\nsskj.bat\n - You can safely ignore this file.  I use it during testing to soft-link to my local copy of ssk.\n\n\nssk2\\\n - Super Starter Kit 2.  If you have not yet copied this folder here yet, please see \nQuick Start\n.\n\n\nscripts\\\n - This folder contains most scripts used in the project.\n\n\ncommon.lua.lua\n - This module contains all of the common/shared settings for the game.\n    +\nTip:\n All other files in the project \nrequire()\n this module.  So, any changes made to it can be seen by all code.  i.e. You can use it as a \nscratch pad\n if need to.\n\n\ngame.lua\n - This module contains all of the game logic to run the example.\n\n\nmyCC.lua\n - A module that creates and configures a \ncollision calculator\n (\nexternal link\n).\n\n\nfactories\\\n - This folder contains all factory definitions and the factory manager.   \n\n\ncoin.lua\n - Coin pickup factory.\n\n\ncoinHUD.lua\n - Coin counter interface factory.\n\n\ndistanceHUD.lua\n - Distance counter interface factory.\n\n\nfactoryMgr.lua\n - The factory manager module.  (See \nThe Factory Concept\n below.)\n\n\nplayer.lua\n - Player factory.  (\nNote:\n All game starters customize this factory.)\n\n\nscoreHUD.lua\n - Score counter interface factory.\n\n\nsegment.lua\n - \nHallway Segment\n factory. (See \nThe Hallway\n below.)\n\n    This factory creates hallway segments/triggers whose job it is to create/load new content as the player moves right and triggers a segment sensor.          \n\n\n\n\n\n\n\n\n\n\nsounds\\\n - A folder where sound effect and music files are stored.\n\n\nmusic\\\n - Music files.\n\n\nsfx\\\n - Sound-effect files.\n\n\n\n\n\n\n\n\n\n\n\n\nThe Factory Concept\n\n\nThis template and all of the starter games use \nfactories\n to create game objects.  In this sense, a factory is a module whose main job is to create a single game object or set of co-related objects.  Ex:\n\n\n\n\nA (pickup) coin.\n\n\nA score counter interface.\n\n\nA player.\n\n\n\n\nNote:\n These factories do not strictly conform to the factory design pattern you may be familiar with in \nOOP\n languages and \nother\n sources.  I am using this terms because the \nfactory\n modules adhere to the broad principle of the pattern: \nCreating Objects\n.\n\n\nTypical Factory Structure\n\n\nThe file containing a \nfactory\n definition usually has the following structure:\n\n\n\n\nHeader - Copyright info and name of factory.\n\n\nrequire()\n Statements - modules and libraries used by the factory are required here.\n\n\nLocalizations - In this section, I localize a number of commonly used ssk features.\n\n\nTip:\n I may not end up using all of these features in the module, but the cost of localization is low and having a standard set of localized features makes for easier coding and duplication later.\n\n\n\n\n\n\nLocals - Next I declare any file-level locals that may be used by the module. \n\n\nEx: \ninitialized\n - Most modules have a flag used to determine if the module has been initialized yet.  This is a safety mechanism I use to avoid accidental double initializations.\n\n\n\n\n\n\nForward Declarations - This is where I declare any functions that may be used by the module, but which I don't expose as \npublic\n members of the module.\n    +\nTip:\n  I rarely use this, but keep a spot for it nonetheless.  Again this is about keeping a known structure and enabling easy duplication.\n\n\nFactory Module Begins\n - The module function definitions start here.\n\n\nfactory.init( params ) - A method do one-time initialization of the factory needs it.  Typical things that would be done here are, pre-loading images, defining sprite-sheets, etc.\n\n\nparams\n - Optional table of parameters.\n\n\n\n\n\n\nfactory.reset( params ) - This function is typically called at the begining of a game (not between levels) to reset the factory module if it is needed.  \n\n\nparams\n - Optional table of parameters.\n\n\nTip:\n While most factories do not use this, \nsegment.lua\n does. \n\n\n\n\n\n\nfactory.new( group, x, y, params ) - This is function responsible for building this factories game object(s).\n\n\ngroup\n - Display group to insert objects into.\n\n\nx\n, \ny\n - x- and y- position to place 'object' at.  \n\n\nparams\n - An optional table of parameters.  This is where we pass special data and arguments a factory may need. \n\n\nTip:\n - You don't need to use the values of these arguments in every builder, but by having a minimialistic and yet common \nnew()\n signature we make factories easy to use, easy to write, and easy to understand.\n\n\n\n\n\n\n\n\n\n\nreturn factory\n - The last line of every factory module, where we return the factory module reference.  \n\n\n\n\nFactories Are Extensible\n\n\nThe above factory definition is pretty basic, but due to the fact that factories are modules, it is easy to extend this concept.  \n\n\nFor example, if you include a built-in-editor in your game, it may be useful to add these functions to your factories:\n\n\n\n\neditor_widget()\n - A function to create a drag-n-drop widget representing this object type for the ditor.\n\n\neditor_new()\n - A function to create the editor instance of this object.  \n\n\n...\n - Whatever else you need.\n\n\n\n\nExample Factory - \ncoin.lua\n\n\n-- =============================================================\n-- Copyright Roaming Gamer, LLC. 2008-2016 (All Rights Reserved)\n-- =============================================================\n-- Pickup: Coin Factory\n-- =============================================================\nlocal common    = require \nscripts.common\n\nlocal myCC      = require \nscripts.myCC\n\nlocal physics   = require \nphysics\n\n\n-- =============================================================\n-- Localizations\n-- =============================================================\n-- Commonly used Lua Functions\nlocal getTimer          = system.getTimer\nlocal mRand                 = math.random\nlocal mAbs                  = math.abs\n--\n-- Common SSK Display Object Builders\nlocal newCircle = ssk.display.newCircle;local newRect = ssk.display.newRect\nlocal newImageRect = ssk.display.newImageRect;local newSprite = ssk.display.newSprite\nlocal quickLayers = ssk.display.quickLayers\n--\n-- Common SSK Helper Modules\nlocal easyIFC = ssk.easyIFC;local persist = ssk.persist\n--\n-- Common SSK Helper Functions\nlocal isValid = display.isValid;local isInBounds = ssk.easyIFC.isInBounds\nlocal normRot = ssk.misc.normRot;local easyAlert = ssk.misc.easyAlert\n\n-- =============================================================\n-- Locals\n-- =============================================================\nlocal initialized = false\n\n-- =============================================================\n-- Forward Declarations\n-- =============================================================\n\n-- =============================================================\n-- Factory Module Begins\n-- =============================================================\nlocal factory = {}\n\n-- ==\n--    init() - One-time initialization only.\n-- ==\nfunction factory.init( params )\n    if(initialized) then return end\n    initialized = true\nend\n\n-- ==\n--    reset() - Reset any per-game logic/settings.\n-- ==\nfunction factory.reset( params )\nend\n\n-- ==\n--    new() - Create new instance(s) of this factory's object(s).\n-- ==\nfunction factory.new( group, x, y, params )\n    params = params or { width = w/4, debugEn = false }\n\n    -- Catch case where we enter, but group was just removed\n    --\n    if( not isValid( group ) ) then return end\n\n    --\n    -- Ensure there is a params value 'segmentWidth'\n    --\n    params.width = params.width or w/4\n\n    --\n    -- Create a coin\n    --\n    local coin = newImageRect( group, x, y, \nimages/coin.png\n, \n                                {   size = params.size or 40 },\n                                {   bodyType = \nstatic\n, isSensor = true,\n                                    calculator = myCC, colliderName = \npickup\n} )\n\n    return coin\nend\n\nreturn factory\n\n\n\n\nFactory Manager\n\n\nThe \nFactory Manager\n is the single access point for all factories and is used as follows:\n\n\n1. Register All Factories\n\n\nFirst (usually in \nmain.lua\n) we register all factories with the manager like this:\n\n\n\nlocal factoryMgr    = require \nscripts.factories.factoryMgr\n\n\nfactoryMgr.register( \nsegment\n, \nscripts.factories.segment\n )\nfactoryMgr.register( \nplayer\n, \nscripts.factories.player\n )\nfactoryMgr.register( \ncoin\n, \nscripts.factories.coin\n )\nfactoryMgr.register( \nscoreHUD\n, \nscripts.factories.scoreHUD\n )\nfactoryMgr.register( \ncoinsHUD\n, \nscripts.factories.coinsHUD\n )\nfactoryMgr.register( \ndistanceHUD\n, \nscripts.factories.distanceHUD\n )\n\n\n\n\n\n2. Initialize Factories\n\n\nLater (usually in \ngame.lua\n) we initialize the factories:\n\n\n-- Initialize 'segment' factory using special options\nfactoryMgr.init( \nsegment\n, { ceilingPosition = top + 40, floorPosition = bottom - 40 } )\n\n-- Initialize remainder of factories using their default settings.\nfactoryMgr.init()\n\n\n\n\n\n3. Call Factory \nnew()\n\n\nNext (usually in game.lua and other game logic modules) we create game objects using \nfactoryMgr.new()\n\n\n\n--\n-- Create HUDs\n--\nfactoryMgr.new( \nscoreHUD\n, layers.interfaces, centerX, top + 70 )  \n\nfactoryMgr.new( \ncoinsHUD\n, layers.interfaces, left + 10, top + 70, \n                { iconSize = 40, fontSize = 36} )   \n\nfactoryMgr.new( \ndistanceHUD\n, layers.interfaces, right - 10, top + 70, { fontSize = 36 } ) \n\n\n\n\n\n4. Reset Factories\n\n\nFinally, when we die or reset the game, we typically reset the factories too.\n\n\n\nfactoryMgr.reset( )\n\n\n\n\n\nThe Hallway\n\n\nAs you will recall from the front page of these docs, the template and all of the starter games in this pack are in a 'world' where the action moves from left-to-right.  \n\n\nThe player moves to the right and the world scrolls to the left.  While this occors, the player stays in the center of the screen (horizontally) and may move up and down.  Finally, as the world scrolls to the left, it brings in new content.\n\n\nYou can think of the world as a big un-ending hallway.  \n\n\nThis hallway is  made up segments where each segment contains a collide-able trigger object.  \n\n\nWhen the player moves-right and the world moves left, it (the player) collides with a hallway segment/trigger.  This causes a listener to execute.  That listener creates the next segment in the hallway including a new trigger.  It also dispatches an event \nonNewSegment\n.  \n\n\nonNewSegment\n Event\n\n\nThe game logic listens for the event \nonNewSegment\n and creates new content at the position of the just created segment.  That new content can be randomly generated, loaded from pre-defined level files, or some combination of both.\n\n\nNote:\n  All of the game starters in this pack use random generation.\n\n\n.. and that is pretty much all there is to it.  Once you get your head around how this works it is really easy to start making this style of game.\n\n\nHave Fun!\n\n\nTemplate Walkthrough\n\n\nI will briefly walk through how the template project executes.  You should open the script files and follow along to get the most from this part of the docs.\n\n\nStartup\n\n\nPlease open: \nbuild.settings\n, \nconfig.lua\n, \nmain.lua\n, then start reading ...\n\n\n\n\nbuild.settings and config.lua processed - Corona processes these two files and sets up the environement. \n\n\nmain.lua - Corona now runs the contents of main.lua\n\n\nrequire()\n and initialize \nSSK2\n\n\nrequire('scripts.common')\n - Loads common.lua module into memory.\n\n\nrequire(...)\n - Loads a number of other modules into memory.\n\n\nConfigure and Load Sounds using the \nSSK2 Sound Manager\n\n\nRegister all \nfactories\n using the \nFactory Manager\n\n\n\n\n\n\nInitialize Game Module.\n\n\nStart Game.\n\n\nTip:\n In the 'Framed' versions of the game starters, we would use composer to load the splash screen here instead.  In the framed versions, the game is not started until the game scene loads.\n\n\n\n\n\n\n\n\nGame Start\n\n\nNow open: \n~/scripts/game.lua\n and continue reading...\n\n\nOnce \ngame.start()\n is called, things start rolling (locate \ngame.start()\n function in \ngame.lua\n to follow along).\n\n\n\n\nDestroy Then Build - The start function calls \ndestroy()\n first.  The very first time we start the game, this doesn't do much.  The primary reason we do this is to clean up on 2nd, 3rd, ... runs after the player 'dies' and starts over.\n\n\nMark game as 'running' - Many parts of the game check the \ncommon.gameIsRunning\n flag before doing any work.  So, we set it to \ntrue\n right away.\n\n\nInitialize Physics.\n\n\nCreate a group hierchy using the \nSSK2 Quick Layers\n feature. The usual hierarchy looks like this (bottom-to-top)\n\n\ngroup\n\n\nlayers\n - Group that holds all layers and gives easy access to them.\n\n\nunderlay\n\n\nworld\n\n\ncontent\n\n\nplayer\n\n\n\n\n\n\ninterfaces\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a background image.  We're making visually simple games.  So we have a visually simple background.\n\n\nCreate an input handler using the \nSSK2 Easy Inputs - One Touch Factory\n.  \n\n\nOne line of code and you've got a whole input handler set up. Booya, SSK2!\n\n\n\n\n\n\nDefine a \nonNewSegment\n event listener.  This piece of code builds our game content as we move to the right.\n\n\nThe template version is pretty boring.  It just drops coins in the hallway.  Check out the game starters to see more interesting listeners.\n\n\n\n\n\n\nDefine a \nonDied\n listener.  When the player dies, it dispatches this event.  We use it to stop the game and clean up.  \n\n\nYou can add more code to this in your own games, but I've tried to keep it simple for the purpose of getting you started.\n9 Define a \nfinalize\n listener on the layers object.  I did this to clean up the \nonNewSegment\n and \nonDied\n listeners.  This function is called when the \nlayers\n display group is destroyed.\n\n\nTip:\n Uses SSK2 \nRuntime improvement\n \nignoreList()\n to do this cleaning.\n\n\n\n\n\n\nCreates a number of beginning segments in our \nhallway\n.\n\n\nCreates the player.\n\n\n\n\nAs soon as the player is created it starts moving and after that everything happens as the results of touch inputs and events. Sweet!\n\n\nMore?\n\n\nYes.  There is more to it than that, but I'm going to let you dig into each of the script files and modules.  \n\n\n\n\nTake it slow and easy.  \n\n\nMake small changes and re-run the template.  \n\n\nYou will understand it soon enough.\n\n\n~ The Roaming Gamer\n\n\n\n\n  Copyright \n Roaming Gamer, LLC. 2008-2016; All Rights Reserved", 
            "title": "Template Overview"
        }, 
        {
            "location": "/overview/#overview", 
            "text": "This is an overview of the template project located in the folder:  ~/template/  Once you understand how the template works you should be ready to examine any of the five game starters.", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#project-structure", 
            "text": "These are the files and folders in this project and what they do:   ~\\template\\  - Home folder for 'template' project  build.settings  - A generic build settings file for this project.  config.lua  - A generic config file for the project using 640x960 letterbox scaling.  main.lua  - The game's launch file.  This is where the game starts.  images\\  - This folder contains images files (.jpg and .png).  Prime.ttf  - A font file used in all examples.  sskj.bat  - You can safely ignore this file.  I use it during testing to soft-link to my local copy of ssk.  ssk2\\  - Super Starter Kit 2.  If you have not yet copied this folder here yet, please see  Quick Start .  scripts\\  - This folder contains most scripts used in the project.  common.lua.lua  - This module contains all of the common/shared settings for the game.\n    + Tip:  All other files in the project  require()  this module.  So, any changes made to it can be seen by all code.  i.e. You can use it as a  scratch pad  if need to.  game.lua  - This module contains all of the game logic to run the example.  myCC.lua  - A module that creates and configures a  collision calculator  ( external link ).  factories\\  - This folder contains all factory definitions and the factory manager.     coin.lua  - Coin pickup factory.  coinHUD.lua  - Coin counter interface factory.  distanceHUD.lua  - Distance counter interface factory.  factoryMgr.lua  - The factory manager module.  (See  The Factory Concept  below.)  player.lua  - Player factory.  ( Note:  All game starters customize this factory.)  scoreHUD.lua  - Score counter interface factory.  segment.lua  -  Hallway Segment  factory. (See  The Hallway  below.) \n    This factory creates hallway segments/triggers whose job it is to create/load new content as the player moves right and triggers a segment sensor.                sounds\\  - A folder where sound effect and music files are stored.  music\\  - Music files.  sfx\\  - Sound-effect files.", 
            "title": "Project Structure"
        }, 
        {
            "location": "/overview/#the-factory-concept", 
            "text": "This template and all of the starter games use  factories  to create game objects.  In this sense, a factory is a module whose main job is to create a single game object or set of co-related objects.  Ex:   A (pickup) coin.  A score counter interface.  A player.   Note:  These factories do not strictly conform to the factory design pattern you may be familiar with in  OOP  languages and  other  sources.  I am using this terms because the  factory  modules adhere to the broad principle of the pattern:  Creating Objects .", 
            "title": "The Factory Concept"
        }, 
        {
            "location": "/overview/#typical-factory-structure", 
            "text": "The file containing a  factory  definition usually has the following structure:   Header - Copyright info and name of factory.  require()  Statements - modules and libraries used by the factory are required here.  Localizations - In this section, I localize a number of commonly used ssk features.  Tip:  I may not end up using all of these features in the module, but the cost of localization is low and having a standard set of localized features makes for easier coding and duplication later.    Locals - Next I declare any file-level locals that may be used by the module.   Ex:  initialized  - Most modules have a flag used to determine if the module has been initialized yet.  This is a safety mechanism I use to avoid accidental double initializations.    Forward Declarations - This is where I declare any functions that may be used by the module, but which I don't expose as  public  members of the module.\n    + Tip:   I rarely use this, but keep a spot for it nonetheless.  Again this is about keeping a known structure and enabling easy duplication.  Factory Module Begins  - The module function definitions start here.  factory.init( params ) - A method do one-time initialization of the factory needs it.  Typical things that would be done here are, pre-loading images, defining sprite-sheets, etc.  params  - Optional table of parameters.    factory.reset( params ) - This function is typically called at the begining of a game (not between levels) to reset the factory module if it is needed.    params  - Optional table of parameters.  Tip:  While most factories do not use this,  segment.lua  does.     factory.new( group, x, y, params ) - This is function responsible for building this factories game object(s).  group  - Display group to insert objects into.  x ,  y  - x- and y- position to place 'object' at.    params  - An optional table of parameters.  This is where we pass special data and arguments a factory may need.   Tip:  - You don't need to use the values of these arguments in every builder, but by having a minimialistic and yet common  new()  signature we make factories easy to use, easy to write, and easy to understand.      return factory  - The last line of every factory module, where we return the factory module reference.", 
            "title": "Typical Factory Structure"
        }, 
        {
            "location": "/overview/#factories-are-extensible", 
            "text": "The above factory definition is pretty basic, but due to the fact that factories are modules, it is easy to extend this concept.    For example, if you include a built-in-editor in your game, it may be useful to add these functions to your factories:   editor_widget()  - A function to create a drag-n-drop widget representing this object type for the ditor.  editor_new()  - A function to create the editor instance of this object.    ...  - Whatever else you need.", 
            "title": "Factories Are Extensible"
        }, 
        {
            "location": "/overview/#example-factory-coinlua", 
            "text": "-- =============================================================\n-- Copyright Roaming Gamer, LLC. 2008-2016 (All Rights Reserved)\n-- =============================================================\n-- Pickup: Coin Factory\n-- =============================================================\nlocal common    = require  scripts.common \nlocal myCC      = require  scripts.myCC \nlocal physics   = require  physics \n\n-- =============================================================\n-- Localizations\n-- =============================================================\n-- Commonly used Lua Functions\nlocal getTimer          = system.getTimer\nlocal mRand                 = math.random\nlocal mAbs                  = math.abs\n--\n-- Common SSK Display Object Builders\nlocal newCircle = ssk.display.newCircle;local newRect = ssk.display.newRect\nlocal newImageRect = ssk.display.newImageRect;local newSprite = ssk.display.newSprite\nlocal quickLayers = ssk.display.quickLayers\n--\n-- Common SSK Helper Modules\nlocal easyIFC = ssk.easyIFC;local persist = ssk.persist\n--\n-- Common SSK Helper Functions\nlocal isValid = display.isValid;local isInBounds = ssk.easyIFC.isInBounds\nlocal normRot = ssk.misc.normRot;local easyAlert = ssk.misc.easyAlert\n\n-- =============================================================\n-- Locals\n-- =============================================================\nlocal initialized = false\n\n-- =============================================================\n-- Forward Declarations\n-- =============================================================\n\n-- =============================================================\n-- Factory Module Begins\n-- =============================================================\nlocal factory = {}\n\n-- ==\n--    init() - One-time initialization only.\n-- ==\nfunction factory.init( params )\n    if(initialized) then return end\n    initialized = true\nend\n\n-- ==\n--    reset() - Reset any per-game logic/settings.\n-- ==\nfunction factory.reset( params )\nend\n\n-- ==\n--    new() - Create new instance(s) of this factory's object(s).\n-- ==\nfunction factory.new( group, x, y, params )\n    params = params or { width = w/4, debugEn = false }\n\n    -- Catch case where we enter, but group was just removed\n    --\n    if( not isValid( group ) ) then return end\n\n    --\n    -- Ensure there is a params value 'segmentWidth'\n    --\n    params.width = params.width or w/4\n\n    --\n    -- Create a coin\n    --\n    local coin = newImageRect( group, x, y,  images/coin.png , \n                                {   size = params.size or 40 },\n                                {   bodyType =  static , isSensor = true,\n                                    calculator = myCC, colliderName =  pickup } )\n\n    return coin\nend\n\nreturn factory", 
            "title": "Example Factory - coin.lua"
        }, 
        {
            "location": "/overview/#factory-manager", 
            "text": "The  Factory Manager  is the single access point for all factories and is used as follows:", 
            "title": "Factory Manager"
        }, 
        {
            "location": "/overview/#1-register-all-factories", 
            "text": "First (usually in  main.lua ) we register all factories with the manager like this:  \nlocal factoryMgr    = require  scripts.factories.factoryMgr \n\nfactoryMgr.register(  segment ,  scripts.factories.segment  )\nfactoryMgr.register(  player ,  scripts.factories.player  )\nfactoryMgr.register(  coin ,  scripts.factories.coin  )\nfactoryMgr.register(  scoreHUD ,  scripts.factories.scoreHUD  )\nfactoryMgr.register(  coinsHUD ,  scripts.factories.coinsHUD  )\nfactoryMgr.register(  distanceHUD ,  scripts.factories.distanceHUD  )", 
            "title": "1. Register All Factories"
        }, 
        {
            "location": "/overview/#2-initialize-factories", 
            "text": "Later (usually in  game.lua ) we initialize the factories:  -- Initialize 'segment' factory using special options\nfactoryMgr.init(  segment , { ceilingPosition = top + 40, floorPosition = bottom - 40 } )\n\n-- Initialize remainder of factories using their default settings.\nfactoryMgr.init()", 
            "title": "2. Initialize Factories"
        }, 
        {
            "location": "/overview/#3-call-factory-new", 
            "text": "Next (usually in game.lua and other game logic modules) we create game objects using  factoryMgr.new()  \n--\n-- Create HUDs\n--\nfactoryMgr.new(  scoreHUD , layers.interfaces, centerX, top + 70 )  \n\nfactoryMgr.new(  coinsHUD , layers.interfaces, left + 10, top + 70, \n                { iconSize = 40, fontSize = 36} )   \n\nfactoryMgr.new(  distanceHUD , layers.interfaces, right - 10, top + 70, { fontSize = 36 } )", 
            "title": "3. Call Factory new()"
        }, 
        {
            "location": "/overview/#4-reset-factories", 
            "text": "Finally, when we die or reset the game, we typically reset the factories too.  \nfactoryMgr.reset( )", 
            "title": "4. Reset Factories"
        }, 
        {
            "location": "/overview/#the-hallway", 
            "text": "As you will recall from the front page of these docs, the template and all of the starter games in this pack are in a 'world' where the action moves from left-to-right.    The player moves to the right and the world scrolls to the left.  While this occors, the player stays in the center of the screen (horizontally) and may move up and down.  Finally, as the world scrolls to the left, it brings in new content.  You can think of the world as a big un-ending hallway.    This hallway is  made up segments where each segment contains a collide-able trigger object.    When the player moves-right and the world moves left, it (the player) collides with a hallway segment/trigger.  This causes a listener to execute.  That listener creates the next segment in the hallway including a new trigger.  It also dispatches an event  onNewSegment .", 
            "title": "The Hallway"
        }, 
        {
            "location": "/overview/#onnewsegment-event", 
            "text": "The game logic listens for the event  onNewSegment  and creates new content at the position of the just created segment.  That new content can be randomly generated, loaded from pre-defined level files, or some combination of both.  Note:   All of the game starters in this pack use random generation.  .. and that is pretty much all there is to it.  Once you get your head around how this works it is really easy to start making this style of game.  Have Fun!", 
            "title": "onNewSegment Event"
        }, 
        {
            "location": "/overview/#template-walkthrough", 
            "text": "I will briefly walk through how the template project executes.  You should open the script files and follow along to get the most from this part of the docs.", 
            "title": "Template Walkthrough"
        }, 
        {
            "location": "/overview/#startup", 
            "text": "Please open:  build.settings ,  config.lua ,  main.lua , then start reading ...   build.settings and config.lua processed - Corona processes these two files and sets up the environement.   main.lua - Corona now runs the contents of main.lua  require()  and initialize  SSK2  require('scripts.common')  - Loads common.lua module into memory.  require(...)  - Loads a number of other modules into memory.  Configure and Load Sounds using the  SSK2 Sound Manager  Register all  factories  using the  Factory Manager    Initialize Game Module.  Start Game.  Tip:  In the 'Framed' versions of the game starters, we would use composer to load the splash screen here instead.  In the framed versions, the game is not started until the game scene loads.", 
            "title": "Startup"
        }, 
        {
            "location": "/overview/#game-start", 
            "text": "Now open:  ~/scripts/game.lua  and continue reading...  Once  game.start()  is called, things start rolling (locate  game.start()  function in  game.lua  to follow along).   Destroy Then Build - The start function calls  destroy()  first.  The very first time we start the game, this doesn't do much.  The primary reason we do this is to clean up on 2nd, 3rd, ... runs after the player 'dies' and starts over.  Mark game as 'running' - Many parts of the game check the  common.gameIsRunning  flag before doing any work.  So, we set it to  true  right away.  Initialize Physics.  Create a group hierchy using the  SSK2 Quick Layers  feature. The usual hierarchy looks like this (bottom-to-top)  group  layers  - Group that holds all layers and gives easy access to them.  underlay  world  content  player    interfaces        Create a background image.  We're making visually simple games.  So we have a visually simple background.  Create an input handler using the  SSK2 Easy Inputs - One Touch Factory .    One line of code and you've got a whole input handler set up. Booya, SSK2!    Define a  onNewSegment  event listener.  This piece of code builds our game content as we move to the right.  The template version is pretty boring.  It just drops coins in the hallway.  Check out the game starters to see more interesting listeners.    Define a  onDied  listener.  When the player dies, it dispatches this event.  We use it to stop the game and clean up.    You can add more code to this in your own games, but I've tried to keep it simple for the purpose of getting you started.\n9 Define a  finalize  listener on the layers object.  I did this to clean up the  onNewSegment  and  onDied  listeners.  This function is called when the  layers  display group is destroyed.  Tip:  Uses SSK2  Runtime improvement   ignoreList()  to do this cleaning.    Creates a number of beginning segments in our  hallway .  Creates the player.   As soon as the player is created it starts moving and after that everything happens as the results of touch inputs and events. Sweet!", 
            "title": "Game Start"
        }, 
        {
            "location": "/overview/#more", 
            "text": "Yes.  There is more to it than that, but I'm going to let you dig into each of the script files and modules.     Take it slow and easy.    Make small changes and re-run the template.    You will understand it soon enough.  ~ The Roaming Gamer     Copyright   Roaming Gamer, LLC. 2008-2016; All Rights Reserved", 
            "title": "More?"
        }, 
        {
            "location": "/help/", 
            "text": "Help!\n\n\nDon't Panic\n\n\nAre you having a problem with the \nStarter\n?  If so, don't panic.\n\n\nI regularly update \n and its co-products.  Most of the time problems can simply be traced back to not having the most up-to-date version of \n or a co-product.\n\n\nCheck Version Of This Starter\n\n\nPlease open the \n~/readMe.txt\n file and look at the top three lines.  If they match this, then this co-product is up-to-date:\n\n\n-------------------------------------------------------------------------------\nStarter: Action Pack #1 (SSK2 Co-Product) (Version 2016.001)\n-------------------------------------------------------------------------------\n\n\n\n\nCheck Version Of SSK2\n\n\nPlease follow these directions to verify your copy of \n is up-to-date: \nChecking Version Of SSK2\n.\n\n\nVerify Version Of Corona SDK\n\n\nYou should be using a recent version of the Corona SDK.  This \nStarter\n was last verified with version 2016.2992.  If your version is older than this, you should consider updating to a more modern version.\n\n\nGetting Help In The Forums\n\n\nIf you've tried everything else, it may be time to get help from me (and others).  You can do this by posting a question in the \nCorona SDK Forums\n.\n\n\n(\nSorry: Direct e-mails will not be answered.  I want help to be visible to all users.\n)\n\n\nWhen posting a question in the forums, be sure to follow these guidelines:\n\n\n\n\nPost to this forum: \nhttps://forums.coronalabs.com/forum/553-other-third-party-tools/\n\n\nMake sure the title starts with: \nRG Action Pack #1 -\n and includes a short and meaninful name for the the problem.\n\n\nExample Title: \nRG Action Pack #1 - Flappy Bird Overlapping Pipes\n\n\n\n\n\n\nIn the body of the post tell me all of the following:\n\n\nVersions / Environment / Target\n\n\nVersion of Starter you are using.\n\n\nVersion of SSK you are using.\n\n\nVersion of Corona SDK you are using.\n\n\nOS you are developing under.\n\n\nWhere you are encountering the issue (Simulator(s) and or Device(s)).\n\n\n\n\n\n\nError Message(s) (If Any)\n\n\nError messages (put them in a code block for legibility)\n\n\n\n\n\n\nSummary Of Problem\n\n\nWhat you are trying to do.\n\n\nWhat you expected to see.\n\n\nWhat you saw instead.\n\n\nWhy you think this is wrong (if there is no explicit error message.)\n\n\n\n\n\n\nHelp Thyself\n\n\nTell me what debugging steps you have tried.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBe clear, concise and precise.\n\n\nThe more effort you put into your post, the better I will be able to help you.\n\n\n~ The Roaming Gamer\n\n\n\n\n\n\n  Copyright \n Roaming Gamer, LLC. 2008-2016; All Rights Reserved", 
            "title": "Help"
        }, 
        {
            "location": "/help/#help", 
            "text": "", 
            "title": "Help!"
        }, 
        {
            "location": "/help/#dont-panic", 
            "text": "Are you having a problem with the  Starter ?  If so, don't panic.  I regularly update   and its co-products.  Most of the time problems can simply be traced back to not having the most up-to-date version of   or a co-product.", 
            "title": "Don't Panic"
        }, 
        {
            "location": "/help/#check-version-of-this-starter", 
            "text": "Please open the  ~/readMe.txt  file and look at the top three lines.  If they match this, then this co-product is up-to-date:  -------------------------------------------------------------------------------\nStarter: Action Pack #1 (SSK2 Co-Product) (Version 2016.001)\n-------------------------------------------------------------------------------", 
            "title": "Check Version Of This Starter"
        }, 
        {
            "location": "/help/#check-version-of-ssk2", 
            "text": "Please follow these directions to verify your copy of   is up-to-date:  Checking Version Of SSK2 .", 
            "title": "Check Version Of SSK2"
        }, 
        {
            "location": "/help/#verify-version-of-corona-sdk", 
            "text": "You should be using a recent version of the Corona SDK.  This  Starter  was last verified with version 2016.2992.  If your version is older than this, you should consider updating to a more modern version.", 
            "title": "Verify Version Of Corona SDK"
        }, 
        {
            "location": "/help/#getting-help-in-the-forums", 
            "text": "If you've tried everything else, it may be time to get help from me (and others).  You can do this by posting a question in the  Corona SDK Forums .  ( Sorry: Direct e-mails will not be answered.  I want help to be visible to all users. )  When posting a question in the forums, be sure to follow these guidelines:   Post to this forum:  https://forums.coronalabs.com/forum/553-other-third-party-tools/  Make sure the title starts with:  RG Action Pack #1 -  and includes a short and meaninful name for the the problem.  Example Title:  RG Action Pack #1 - Flappy Bird Overlapping Pipes    In the body of the post tell me all of the following:  Versions / Environment / Target  Version of Starter you are using.  Version of SSK you are using.  Version of Corona SDK you are using.  OS you are developing under.  Where you are encountering the issue (Simulator(s) and or Device(s)).    Error Message(s) (If Any)  Error messages (put them in a code block for legibility)    Summary Of Problem  What you are trying to do.  What you expected to see.  What you saw instead.  Why you think this is wrong (if there is no explicit error message.)    Help Thyself  Tell me what debugging steps you have tried.        Be clear, concise and precise.  The more effort you put into your post, the better I will be able to help you.  ~ The Roaming Gamer      Copyright   Roaming Gamer, LLC. 2008-2016; All Rights Reserved", 
            "title": "Getting Help In The Forums"
        }, 
        {
            "location": "/rgdocs/", 
            "text": "Redirecting to homepage now...", 
            "title": "RG Docs Home"
        }
    ]
}